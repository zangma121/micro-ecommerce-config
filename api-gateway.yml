## Info endpoint
info:
  app:
    name: API Gateway

# Define the port where the API gateway server would be running
server:
  port: 9000

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 9999
    contextPath: uaa
    
# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that 
# Spring cloud security would need to secure the api gateway before it can route the 
# requests using zuul

zuul:
  routes:
    catalog-service:
      path: /catalog/**
    reviews-service:
      path: /reviews/**
    recommendations-service:
      path: /recommendations/**
    orders-service:
      path: /orders/**
    host:
      connect-timeout-millis: 5000
      socket-timeout-millis: 10000

hystrix:
    command:
        default:
            execution:
                isolation:
                    thread:
                        timeoutInMilliseconds: 10000

# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: ${vcap.services.eureka.credentials.uri:http://localhost:8761}/eureka/
    
security:
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: acme
      clientSecret: acmesecret
    resource:
      jwt:
        keyUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token_key
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnGp/Q5lh0P8nPL21oMMrt2RrkT9AW5jgYwLfSUnJVc9G6uR3cXRRDCjHqWU5WYwivcF180A6CWp/ireQFFBNowgc5XaA0kPpzEtgsA5YsNX7iSnUibB004iBTfU9hZ2Rbsc8cWqynT0RyN4TP1RYVSeVKvMQk4GT1r7JCEC+TNu1ELmbNwMQyzKjsfBXyIOCFU/E94ktvsTZUHF4Oq44DBylCDsS1k7/sfZC2G5EU7Oz0mhG8+Uz6MSEQHtoIi6mc8u64Rwi3Z3tscuWG2ShtsUFuNSAFNkY7LkLn+/hxLCu2bNISMaESa8dG22CIMuIeRLVcAmEWEWH5EEforTg+QIDAQAB
          -----END PUBLIC KEY-----

# The userInfoUri is used to authenticate the user so that SSO token can be relayed forward. It needs to either be
# a physical endpoint (defined using userInfoUri) OR can be bypassed if you use a JSON web token (JWT) that stores
# information about grants and authentication in the token itself.

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
#    resource: 
#      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
#      preferTokenInfo: false 


---
# Auth-server instance when used on Docker
spring:
  profiles: docker
  
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eureka:8761/eureka/
      
authserver:
  hostname: authserver
  port: 9999
  contextPath: uaa
    
---
spring:
  profiles: cloud

authserver:
    hostname: http://microservices-authserver-idugalic.cfapps.io
    port: 80
    contextPath: uaa

eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80
